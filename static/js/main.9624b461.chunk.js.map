{"version":3,"sources":["config.js","Product.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["serverBase","Product","_ref","name","image","id","react","Paper","width","src","alt","Button","variant","color","onClick","productId","request","get","set","localStorage","getItem","then","response","console","log","cart","body","index","products","findIndex","p","push","quantity","product_id","put","send","test","Login","Grid","container","justify","item","xs","className","onSubmit","event","user","preventDefault","post","identifier","target","email","value","password","setItem","jwt","length","window","location","href","TextField","label","fullWidth","margin","type","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setProducts","_React$useState3","_React$useState4","categories","setCategories","_React$useState5","_React$useState6","current","setCurrent","useEffect","filter","react_default","a","createElement","map","category","key","removeItem","style","float","spacing","product","images","src_Product","url","src_Login_0","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAAaA,EAAa,4BC0CXC,EArCC,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GA6B5B,OAAOC,EAAA,cAACC,EAAA,EAAD,KACHD,EAAA,qBAAKE,MAAM,QAAQC,IAAKL,EAAOM,IAAI,KAClCP,EACDG,EAAA,cAACK,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,UAC7BC,QAAS,kBAhCEC,EAgCcV,OA/B7BW,IAAQC,IAAIjB,EAAa,UACpBkB,IAAI,gBAAiB,UAAYC,aAAaC,QAAQ,UACtDC,KAAK,SAACC,GACHC,QAAQC,IAAIF,GACZ,IAAIG,EAAOH,EAASI,KAAK,GACrBC,EAAQF,EAAKG,SAASC,UAAU,SAACC,GACjC,OAAOA,EAAEzB,KAAOU,IAEjBY,EAAQ,EACPF,EAAKG,SAASG,KAAK,CACfC,SAAU,EACVC,WAAYlB,IAGhBU,EAAKG,SAASD,GAAOK,WAEzBT,QAAQC,IAAIC,GACZT,IAAQkB,IAAIlC,EAAa,UAAYyB,EAAKpB,IACrCa,IAAI,gBAAiB,UAAYC,aAAaC,QAAQ,UACtDF,IAAI,eAAgB,oBACpBiB,KAAK,CACFP,SAAU,CAAEQ,KAAM,UAErBf,KAAKE,QAAQC,OAxBZ,IAACT,IA+Bf,+BC6BOsB,SA5DD,WAmCV,OAAO/B,EAAA,cAACgC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UAC3BlC,EAAA,cAACgC,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACXpC,EAAA,cAACC,EAAA,EAAD,CAAOoC,UAAU,cACbrC,EAAA,6CACAA,EAAA,sBAAMsC,SArCG,SAACC,GAClB,IAAIC,EAAO,KACXD,EAAME,iBACN/B,IAAQgC,KAAKhD,EAAa,eACrBmC,KAAK,CACFc,WAAYJ,EAAMK,OAAOC,MAAMC,MAC/BC,SAAUR,EAAMK,OAAOG,SAASD,QAEnC/B,KAAK,SAACC,GAKH,OAJAH,aAAamC,QAAQ,QAAShC,EAASI,KAAK6B,KAC5CpC,aAAamC,QAAQ,SAAUhC,EAASI,KAAKoB,KAAKzC,IAElDyC,EAAOxB,EAASI,KAAKoB,KACd9B,IAAQC,IAAIjB,EAAa,kBAAmBsB,EAASI,KAAKoB,KAAKzC,IACjEa,IAAI,gBAAiB,UAAYI,EAASI,KAAK6B,OAEvDlC,KAAK,SAACC,GACyB,IAAzBA,EAASI,KAAK8B,OACbxC,IAAQgC,KAAKhD,EAAa,UACrBkB,IAAI,gBAAiB,UAAYC,aAAaC,QAAQ,UACtDe,KAAK,CACFW,KAAMA,EACNlB,SAAU,OAEbP,KAAK,WACFoC,OAAOC,SAASC,KAAO,MAG/BF,OAAOC,SAASC,KAAO,QAUvBrD,EAAA,cAACsD,EAAA,EAAD,CACIvD,GAAG,QACHwD,MAAM,wBACNC,WAAS,EACTC,OAAO,WAEXzD,EAAA,cAACsD,EAAA,EAAD,CACIvD,GAAG,WACHwD,MAAM,gBACNG,KAAK,WACLF,WAAS,EACTC,OAAO,WAEXzD,EAAA,cAACK,EAAA,EAAD,CAAQE,MAAM,UAAUD,QAAQ,YAAYoD,KAAK,UAAjD,gBCqBLC,MAxEf,WAAe,IAAAC,EAEqBC,IAAMC,SAAS,IAFpCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAELtC,EAFKyC,EAAA,GAEKG,EAFLH,EAAA,GAAAI,EAGyBN,IAAMC,SAAS,IAHxCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGLE,EAHKD,EAAA,GAGOE,EAHPF,EAAA,GAAAG,EAKmBV,IAAMC,SAAS,IALlCU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAKLE,EALKD,EAAA,GAKIE,EALJF,EAAA,GAsCb,OA/BAX,IAAMc,UAAU,WAEd,IAAIC,EAAS,GACVH,IACDG,GAAU,gBAAkBH,GAE9B/D,IAAQC,IAAIjB,EAAa,YAAckF,GACpC7D,KAAK,SAACC,GACLC,QAAQC,IAAI,aACZgD,EAAYlD,EAASI,SAGxB,CAACqD,IAEJZ,IAAMc,UAAU,WACdjE,IAAQC,IAAIjB,EAAa,eACtBqB,KAAK,SAACC,GACLC,QAAQC,IAAI,cACZF,EAASI,KAAKK,KAAK,CACjB1B,GAAI,GACJF,KAAM,UAERyE,EAActD,EAASI,SAE1B,IAOCP,aAAaC,QAAQ,SAMvB+D,EAAAC,EAAAC,cAAA,OAAK1C,UAAU,OACZgC,EAAWW,IAAI,SAACC,GACf,OAAOJ,EAAAC,EAAAC,cAAC1E,EAAA,EAAD,CAAQ6E,IAAKD,EAASlF,GAC3BO,QAASmE,IAAYQ,EAASlF,GAAK,YAAc,OACjDQ,MAAM,UACNC,QAAS,WACPkE,EAAWO,EAASlF,MAClBkF,EAASpF,QAGjBgF,EAAAC,EAAAC,cAAC1E,EAAA,EAAD,CAAQE,MAAM,YAAYC,QArBT,WACnBK,aAAasE,WAAW,SACxBhC,OAAOC,SAASC,KAAO,KAmB4B+B,MAAO,CAAEC,MAAO,UAAjE,oBAIAR,EAAAC,EAAAC,cAAC/C,EAAA,EAAD,CAAMC,WAAS,EAACqD,QAAS,GACtBhE,EAAS0D,IAAI,SAACO,GACb,OAA6B,IAA1BA,EAAQC,OAAOtC,OAAqB,KAEhC2B,EAAAC,EAAAC,cAAC/C,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAG8C,IAAKK,EAAQxF,IACpC8E,EAAAC,EAAAC,cAACU,EAAD,CAAS5F,KAAM0F,EAAQ1F,KAAME,GAAIwF,EAAQxF,GACvCD,MAAOJ,EAAa6F,EAAQC,OAAO,GAAGE,WAzBzCb,EAAAC,EAAAC,cAACY,EAAD,OCnCSC,QACW,cAA7BzC,OAAOC,SAASyC,UAEe,UAA7B1C,OAAOC,SAASyC,UAEhB1C,OAAOC,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvF,KAAK,SAAAwF,GACjCA,EAAaC","file":"static/js/main.9624b461.chunk.js","sourcesContent":["export const serverBase = 'http://192.168.130.2:1337';\n","import * as React from 'react';\nimport { Paper, Button } from '@material-ui/core';\nimport request from 'superagent';\nimport { serverBase } from './config';\n\nconst Product = ({ name, image, id }) => {\n    const handleAdd = (productId) => {\n        request.get(serverBase + '/carts')\n            .set('Authorization', 'Bearer ' + localStorage.getItem('__jwt'))\n            .then((response) => {\n                console.log(response);\n                var cart = response.body[0];\n                var index = cart.products.findIndex((p) => {\n                    return p.id === productId;\n                });\n                if(index < 0){\n                    cart.products.push({\n                        quantity: 1,\n                        product_id: productId\n                    });\n                } else {\n                    cart.products[index].quantity++;\n                }\n                console.log(cart)\n                request.put(serverBase + '/carts/' + cart.id)\n                    .set('Authorization', 'Bearer ' + localStorage.getItem('__jwt'))\n                    .set('Content-Type', 'application/json')\n                    .send({\n                        products: { test: 'hola' }\n                    })\n                    .then(console.log);\n            })\n    }\n\n    return <Paper>\n        <img width=\"100px\" src={image} alt=\"\"/>\n        {name}\n        <Button variant=\"outlined\" color=\"primary\"\n            onClick={() => handleAdd(id)}>Agregar</Button>\n    </Paper>;\n}\n\nexport default Product;","import * as React from 'react';\nimport { Grid, Paper, TextField, Button } from '@material-ui/core';\nimport './Login.css';\nimport request from 'superagent';\nimport { serverBase } from './config';\n\nconst Login = () => {\n\n    const handleSubmit = (event) => {\n        let user = null;\n        event.preventDefault();\n        request.post(serverBase + '/auth/local')\n            .send({\n                identifier: event.target.email.value,\n                password: event.target.password.value\n            })\n            .then((response) => {\n                localStorage.setItem('__jwt', response.body.jwt);\n                localStorage.setItem('__user', response.body.user.id);\n                \n                user = response.body.user;\n                return request.get(serverBase + '/carts?user.id='+ response.body.user.id)\n                    .set('Authorization', 'Bearer ' + response.body.jwt)\n            })\n            .then((response) => {\n                if(response.body.length === 0){\n                    request.post(serverBase + '/carts')\n                        .set('Authorization', 'Bearer ' + localStorage.getItem('__jwt'))\n                        .send({\n                            user: user,\n                            products: '[]'\n                        })\n                        .then(() => {\n                            window.location.href = '/';\n                        });\n                } else {\n                    window.location.href = '/';\n                }\n            })\n    }\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={6}>\n            <Paper className=\"login-form\">\n                <h1>Iniciar Sesión</h1>\n                <form onSubmit={handleSubmit}>\n                    <TextField\n                        id=\"email\"\n                        label=\"Correo Electrónico\"\n                        fullWidth\n                        margin=\"normal\"\n                        />\n                    <TextField\n                        id=\"password\"\n                        label=\"Contraseña\"\n                        type=\"password\"\n                        fullWidth\n                        margin=\"normal\"\n                        />\n                    <Button color=\"primary\" variant=\"contained\" type=\"submit\">Entrar</Button>\n                </form>\n            </Paper>\n        </Grid>\n    </Grid>;\n}\n\nexport default Login;","import React from 'react';\nimport './App.css';\nimport Product from './Product';\nimport request from 'superagent';\nimport { Grid, Button } from '@material-ui/core';\nimport Login from './Login';\nimport { serverBase } from './config';\n\nfunction App() {\n\n  const [ products, setProducts ] = React.useState([]);\n  const [ categories, setCategories ] = React.useState([]);\n\n  const [ current, setCurrent ] = React.useState('');\n\n  React.useEffect(() => {\n    \n    let filter = '';\n    if(current){\n      filter += '?category.id=' + current;\n    }\n    request.get(serverBase + '/products' + filter)\n      .then((response) => {\n        console.log('productos');\n        setProducts(response.body);\n      });\n\n  }, [current]);\n\n  React.useEffect(() => {\n    request.get(serverBase + '/categories')\n      .then((response) => {\n        console.log('categorias');\n        response.body.push({\n          id: '',\n          name: 'Todos',\n        });\n        setCategories(response.body);\n      });\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('__jwt');\n    window.location.href = '/';\n  }\n\n  if(!localStorage.getItem('__jwt')){\n    return <Login />;\n  }\n  \n\n  return (\n    <div className=\"App\">\n      {categories.map((category) => {\n        return <Button key={category.id}\n          variant={current === category.id ? 'contained' : 'text'}\n          color=\"primary\"\n          onClick={() => {\n            setCurrent(category.id)\n          }}>{category.name}</Button>\n      })}\n\n      <Button color=\"secondary\" onClick={handleLogout} style={{ float: 'right' }}>\n        Cerrar Sesión\n      </Button>\n\n      <Grid container spacing={2}>\n        {products.map((product) => {\n          if(product.images.length === 0) return null;\n          \n          return <Grid item xs={4} key={product.id}>\n            <Product name={product.name} id={product.id}\n              image={serverBase + product.images[0].url}></Product>\n          </Grid>\n        })}\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}